package frsf.cidisi.exercise.drone.search;

import java.util.List;

import logica.Esquina;
import logica.Locacion;
import logica.Posicion;
import frsf.cidisi.faia.agent.Perception;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;

/**
 * Represent the internal state of the Agent.
 */
public class DroneAgentState extends SearchBasedAgentState {
	
    private Locacion ciudad;
    private int energiaInicial;
    private int energiaGastada;
    private Locacion locacion;
    private boolean[] direccionVictimario;
    private int victimariosEncontrados;
	
    public DroneAgentState() {
    
    		 ciudad = new Locacion();
			 energiaInicial = 0;
			 energiaGastada = 0;
			 locacion = new Locacion();
			 direccionVictimario = new boolean[9];
			 victimariosEncontrados = 0;
        
        this.initState();
    }

    /**
     * This method clones the state of the agent. It's used in the search
     * process, when creating the search tree.
     */
    @Override
    public SearchBasedAgentState clone() {
        
    	DroneAgentState estadoCopia = new DroneAgentState();
    	estadoCopia.setciudad(ciudad.clone(null));
    	estadoCopia.setenergiaInicial(energiaInicial);
    	estadoCopia.setenergiaGastada(energiaGastada);
    	estadoCopia.setvictimariosEncontrados(victimariosEncontrados);
    	boolean[] dirAux = new boolean[9];
    	for(int i=0; i<8; i++){
    		dirAux[i] = direccionVictimario[i];
    	}
    	dirAux[8]=direccionVictimario[8];
    	estadoCopia.setdireccionVictimario(dirAux);
    	estadoCopia.setlocacion((estadoCopia.getciudad()).buscarLocacion((int) locacion.getCentro().getX(),(int) locacion.getCentro().getY(),(int) locacion.getPadre().getCentro().getX(),(int) locacion.getPadre().getCentro().getY(),(int) locacion.getPadre().calcularAltura()));
        return estadoCopia;
    }

    /**
     * This method is used to update the Agent State when a Perception is
     * received by the Simulator.
     */
    @Override
    public void updateState(Perception p) {
    	
    	// Actualizamos dirección de victimarios
    	DroneAgentPerception percepcion = (DroneAgentPerception) p;
    	direccionVictimario = percepcion.getcamara();
    	
    	// Actualizamos posición
    	Posicion aux = percepcion.getgps();
    	if(locacion.calcularAltura() > aux.getZ()) // subió
    		locacion = locacion.getPadre();
    	else if(locacion.calcularAltura() < aux.getZ()){ // bajó
    		for(Locacion l: locacion.getSublocaciones())
    			if(l.getCentro().getX() == aux.getX() && l.getCentro().getY() == aux.getY())
    				locacion = l;
    	}
    	else{
    		for(Locacion l: locacion.getAdyacentes())
    			if(l.getCentro().getX() == aux.getX() && l.getCentro().getY() == aux.getY())
    				locacion = l;
    	}
    	
    	// Actualizamos la ciudad
    	List<Locacion> actualizar = locacion.getPadre().getSublocaciones();
    	for(Locacion lp : percepcion.getantena()){
    		for(Locacion lc : actualizar){
    			if(lp.getCentro().getX() == lc.getCentro().getX() && lp.getCentro().getY() == lc.getCentro().getY())
    				lc.setSenial(lp.getSenial());
    		}
    	}
    	
    	//Si hay un victimario en la posición actual, la cámara debe advertirlo y
    	//actualizar el estado de la locacion actual del drone
    	if(direccionVictimario[8]==true)
    		((Esquina) locacion).setCriminal(true);
    	
    }

    /**
     * This method is optional, and sets the initial state of the agent.
     */
    @Override
    public void initState() {
        
    //TODO: Complete Method , ciudad va a tener q tomarse de la interfaz
    	 ciudad.armar_ciudad_con_valores();
		 energiaInicial = 1000 ;
		 locacion = ciudad.getSublocaciones().get(0);
    }

    /**
     * This method returns the String representation of the agent state.
     */
    @Override
    public String toString() {
        String str = "";
        
        str = str + "Estado del Drone:\nCiudad:\n";
        
        //ciudad
        for(int i=0;i< ciudad.getSublocaciones().size();i++){ //cuadrantes
        	str = str + "Intensidad en " + (ciudad.getSublocaciones()).get(i).getNombre() + ": " + (ciudad.getSublocaciones()).get(i).getSenial() + "\n";
        	for(int j=0;j<ciudad.getSublocaciones().get(i).getSublocaciones().size();j++){//subcuadrantes
        		str = str + "  Intensidad en " + (ciudad.getSublocaciones().get(i).getSublocaciones()).get(j).getNombre() + ": " + (ciudad.getSublocaciones().get(i).getSublocaciones()).get(j).getSenial() + "\n";
        		for(int k=0;k<((ciudad.getSublocaciones().get(i).getSublocaciones()).get(j)).getSublocaciones().size();k++){//esquinas
        			str = str + "    Intesidad en " + ((ciudad.getSublocaciones().get(i).getSublocaciones()).get(j)).getSublocaciones().get(k).getNombre() + ": " + ((ciudad.getSublocaciones().get(i).getSublocaciones()).get(j)).getSublocaciones().get(k).getSenial() + "\n";
        		}
        	}
        }
        str = str + "\nEnergia Inicial: " + energiaInicial;
        str = str + "\nEnergia Gastada: " + energiaGastada;
        str = str + "\nVictimarios Encontrados: " + victimariosEncontrados;
        str = str + "\nEnergia Inicial: " + energiaInicial;
        str = str + "\nLocacion Actual: " + locacion.getNombre();
        str = str + "\nDireccion Victimario: ";
    	str = str + "\nNORTE: " + direccionVictimario[0];
    	str = str + "\nNORESTE: " + direccionVictimario[1];
    	str = str + "\nESTE: " + direccionVictimario[2];
    	str = str + "\nSURESTE: " + direccionVictimario[3];
    	str = str + "\nSUR: " + direccionVictimario[4];
    	str = str + "\nSUROESTE: " + direccionVictimario[5];
    	str = str + "\nOESTE: " + direccionVictimario[6];
    	str = str + "\nNOROESTE: " + direccionVictimario[7];
    	str = str + "\nESQUINA ACTUAL: " + direccionVictimario[8] + "\n";
        
        return str;
    }

    /**
     * This method is used in the search process to verify if the node already
     * exists in the actual search.
     */
    @Override
    public boolean equals(Object obj) {

    	DroneAgentState aux = (DroneAgentState) obj;
    	boolean mismaEnergiaGastada = aux.getenergiaGastada() == energiaGastada;
    	boolean mismaEnergiaInicial = aux.getenergiaInicial() == energiaInicial;
    	boolean mismaCantVictimariosEncontrados = aux.getvictimariosEncontrados() == victimariosEncontrados;
    	boolean mismaDireccionVictimario = true;
    	for(int i=0;i<8;i++){
    		mismaDireccionVictimario = mismaDireccionVictimario && (aux.getdireccionVictimario()[i] == direccionVictimario[i] );
    	}
    	boolean mismaCiudad = aux.getciudad().equals(ciudad);
    	boolean mismaLocacion = aux.getlocacion().equals(locacion);
    	
        
    	return mismaEnergiaGastada && mismaEnergiaInicial && mismaCantVictimariosEncontrados
    				&& mismaDireccionVictimario && mismaCiudad && mismaLocacion;
    }
   	
     public Locacion getciudad(){
        return ciudad;
     }
     public void setciudad(Locacion arg){
        ciudad = arg;
     }
     public int getenergiaInicial(){
        return energiaInicial;
     }
     public void setenergiaInicial(int arg){
        energiaInicial = arg;
     }
     public int getenergiaGastada(){
        return energiaGastada;
     }
     public void setenergiaGastada(int arg){
        energiaGastada = arg;
     }
     public Locacion getlocacion(){
        return locacion;
     }
     public void setlocacion(Locacion arg){
        locacion = arg;
     }
     public boolean[] getdireccionVictimario(){
        return direccionVictimario;
     }
     public void setdireccionVictimario(boolean[] arg){
        direccionVictimario = arg;
     }
     public int getvictimariosEncontrados(){
        return victimariosEncontrados;
     }
     public void setvictimariosEncontrados(int arg){
        victimariosEncontrados = arg;
     }
	
}

