package frsf.cidisi.exercise.drone.search;

import frsf.cidisi.exercise.drone.search.actions.Subir;
import frsf.cidisi.exercise.drone.search.actions.Bajar;
import frsf.cidisi.exercise.drone.search.actions.MoverLocacionN;
import frsf.cidisi.exercise.drone.search.actions.MoverLocacionE;
import frsf.cidisi.exercise.drone.search.actions.MoverLocacionS;
import frsf.cidisi.exercise.drone.search.actions.MoverLocacionO;
import frsf.cidisi.exercise.drone.search.actions.MoverLocacionNE;
import frsf.cidisi.exercise.drone.search.actions.MoverLocacionNO;
import frsf.cidisi.exercise.drone.search.actions.MoverLocacionSE;
import frsf.cidisi.exercise.drone.search.actions.MoverLocacionSO;
import frsf.cidisi.exercise.drone.search.actions.IdentificarVictimario;

import frsf.cidisi.faia.agent.Perception;
import frsf.cidisi.faia.agent.search.Problem;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgent;
import frsf.cidisi.faia.agent.Action;
import frsf.cidisi.faia.solver.search.*;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Vector;

public class DroneAgent extends SearchBasedAgent {

	private int search_strategy = 1;
	public static final int PROFUNDIDAD=1;
	public static final int ANCHURA=2;
	public static final int COSTO_UNIFORME=3;
	public static final int A_ASTERISCO=4;
	
    public DroneAgent() {

        // The Agent Goal
        AgentGoal agGoal = new AgentGoal();

        // The Agent State
        DroneAgentState agState = new DroneAgentState();
        this.setAgentState(agState);

        // Create the operators
        Vector<SearchAction> operators = new Vector<SearchAction>();
        operators.addElement(new IdentificarVictimario());
        operators.addElement(new MoverLocacionN());	
        operators.addElement(new MoverLocacionE());	
        operators.addElement(new MoverLocacionS());	
        operators.addElement(new MoverLocacionO());	
       // operators.addElement(new MoverLocacionNE());	
        //operators.addElement(new MoverLocacionNO());	
        //operators.addElement(new MoverLocacionSE());	
        //operators.addElement(new MoverLocacionSO());	
        operators.addElement(new Bajar());
        operators.addElement(new Subir());	

        // Create the Problem which the agent will resolve
        Problem problem = new Problem(agGoal, agState, operators);
        this.setProblem(problem);
    }

    /**
     * This method is executed by the simulator to ask the agent for an action.
     */
    @Override
    public Action selectAction() {
    	
    	Strategy strategy = null;
    	switch(search_strategy){
    	case(PROFUNDIDAD):
    		strategy = new DepthFirstSearch();
    		break;
    	case(ANCHURA):
    		strategy = new BreathFirstSearch();
    		break;
    	case(COSTO_UNIFORME):
    		strategy = new UniformCostSearch(new CostFunction());
    		break;
    	case(A_ASTERISCO):
    		strategy = new AStarSearch(new CostFunction(),new Heuristic());
    		break;
    	}
    	
        // Create a Search object with the strategy
        Search searchSolver = new Search(strategy);

        /* Generate an XML file with the search tree. It can also be generated
         * in other formats like PDF with PDF_TREE */
        //searchSolver.setVisibleTree(Search.GRAPHVIZ_TREE);
        searchSolver.setVisibleTree(Search.EFAIA_TREE);

        // Set the Search searchSolver.
        this.setSolver(searchSolver);

        // Ask the solver for the best action
        Action selectedAction = null;
        try {
            selectedAction =
                    this.getSolver().solve(new Object[]{this.getProblem()});
        } catch (Exception ex) {
            Logger.getLogger(DroneAgent.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Return the selected action
        return selectedAction;

    }

    /**
     * This method is executed by the simulator to give the agent a perception.
     * Then it updates its state.
     * @param p
     */
    @Override
    public void see(Perception p) {
        this.getAgentState().updateState(p);
    }
    
    public void setEstrategia(int s){
    	search_strategy = s;
    }
    
}
